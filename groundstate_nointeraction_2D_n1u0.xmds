<?xml version="1.0" encoding="UTF-8"?>
<simulation xmds-version="2">
  <name>groundstate_nointeraction2D_n1u0</name>
  <author>Heitor da Silva</author>
  <description>
    Calculate the ground state of the non-linear Schrodinger equation in a harmonic magnetic trap.
    This is done by evolving it in imaginary time while re-normalising each timestep.
  </description>
  
  <features>
    <auto_vectorise />
    <error_check> yes </error_check>
    <benchmark />
    <bing />
    <fftw plan="exhaustive" />
    <globals>
      <![CDATA[
        const real Uint = 0.0;
        const real Nparticles = 100.0;
      ]]>
    </globals>
  </features>
  
   <geometry>
    <propagation_dimension> t </propagation_dimension>
    <transverse_dimensions>
      <dimension name="r" lattice="1024" domain="(0, 5.0)" transform="bessel" volume_prefactor="2*M_PI"/>  
    </transverse_dimensions>
  </geometry>

<vector name="potential" initial_basis="r" type="real">
    <components> V </components>
    <initialisation>
      <![CDATA[
        V  = 0.5*r*r;
      ]]>
    </initialisation>
  </vector>
  
  <vector name="wavefunction" initial_basis="r" type="complex">
    <components> phi </components>
    <initialisation>
      <![CDATA[
        if (fabs(r) < 3.0) {
          phi = 1.0;
          // This will be automatically normalised later
        } else {
          phi = 0.0;
        }if (fabs(r) < 3.0) {
          phi = 1.0;
          // This will be automatically normalised later
        } else {
          phi = 0.0;
        }
      ]]>
    </initialisation>
  </vector>
  
  <computed_vector name="normalisation" dimensions="" type="real">
    <components> Ncalc </components>
    <evaluation>
      <dependencies basis="r">wavefunction</dependencies>
      <![CDATA[
        // Calculate the current normalisation of the wave function.
        Ncalc = mod2(phi);
      ]]>
    </evaluation>
  </computed_vector>

<computed_vector name="pot_energy" dimensions="" type="real">
    <components> en_pot </components>
    <evaluation>
      <dependencies basis="r">wavefunction</dependencies>
      <![CDATA[
        // Calculate the potential energy.
        en_pot = 0.5*(r*r)*mod2(phi);
      ]]>
    </evaluation>
  </computed_vector>

  <computed_vector name="kin_energy" dimensions="" type="real">
    <components> en_kin </components>
    <evaluation>
      <dependencies basis="kr">wavefunction</dependencies>
      <![CDATA[
        // Calculate the potential energy.
        en_kin = 0.5*(kr*kr)*mod2(phi);
      ]]>
    </evaluation>
  </computed_vector>

  <sequence>
      <filter>
        <![CDATA[
          printf("Hello world from a filter segment!\n");
        ]]>
      </filter>

    <filter>
        <dependencies>normalisation wavefunction</dependencies>
      <![CDATA[
        phi *= sqrt(Nparticles/Ncalc);
      ]]>
    </filter>

    <integrate algorithm="ARK45" interval="4.0" steps="400" tolerance="1e-10">
      <samples>25 400 400 400 400 </samples>
      <filters where="step end">
        <filter>
          <dependencies>wavefunction normalisation</dependencies>
          <![CDATA[
            // Correct normalisation of the wavefunction
            phi *= sqrt(Nparticles/Ncalc);
          ]]>
        </filter>
      </filters>
      <operators>
        <operator kind="ip" dimensions="r">
          <operator_names>Tr</operator_names>
          <![CDATA[
            Tr = -0.5*kr*kr;
          ]]>
        </operator>
  <integration_vectors>wavefunction</integration_vectors>
        <dependencies>potential</dependencies>
        <![CDATA[
          dphi_dt = Tr[phi] - (V + Uint*mod2(phi))*phi;
        ]]>u
      </operators>
    </integrate>

    <breakpoint filename="groundstate_nointeraction2D_n1u0_break.xsil" format="ascii">
      <dependencies basis="kr">wavefunction </dependencies>
    </breakpoint>

  </sequence>

  <output filename="groundstate_nointeraction2D_n1u0.xsil">
      <sampling_group basis="r" initial_sample="yes">
        <moments>norm_dens</moments>
        <dependencies>wavefunction normalisation</dependencies>
        <![CDATA[
          norm_dens = mod2(phi);
        ]]>
      </sampling_group>
      <sampling_group initial_sample="yes">
        <moments>norm</moments>
        <dependencies>normalisation</dependencies>
        <![CDATA[
          norm = Ncalc;
        ]]>
      </sampling_group>
      <sampling_group initial_sample="yes">
        <moments>energyp</moments>
        <dependencies>pot_energy</dependencies>
        <![CDATA[
          energyp = en_pot;
        ]]>
      </sampling_group>
      <sampling_group initial_sample="yes">
        <moments>energyk</moments>
        <dependencies>kin_energy</dependencies>
        <![CDATA[
          energyk = en_kin;
        ]]>
      </sampling_group>
      <sampling_group initial_sample="yes" basis="r">
      <dependencies> wavefunction </dependencies>
      <moments> phireal phiimag </moments>
      <![CDATA[
        phireal = Re(phi);
        phiimag = Im(phi);
      ]]>
      </sampling_group>
  </output>
</simulation>
