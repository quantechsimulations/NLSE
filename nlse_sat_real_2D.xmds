<simulation xmds-version="2">
  <name> sat_real </name>
  <author>Heitor da Silva</author>
	  <description>
	    This code provides the real time evolution of the 2D NLSE for the saturating regime.
	    The current version returns four outputs: the total energy as a function of t,
	    the density as a function of transverse coordinates x and y, the normalization as a function
	    of t and, the imaginary and real components of the wave function as function of x, y and t.
	    Absorbing boundary conditions have been implemented. They can be switched off by setting kappa = 0.
	  </description>

<features>
    <benchmark />
    <auto_vectorise />
    <validation kind="run-time" />
    <globals>
      <![CDATA[
        const real rcrit = 1.1;
      ]]>
    </globals>
    <arguments>
	    <argument name="psiM" type="real" default_value="1.0"/>      
	    <argument name="sigma" type="real" default_value="1.0"/>
      <argument name="g" type="real" default_value="1.0"/>
      <argument name="kappa" type="real" default_value="1.0"/>
    </arguments>
</features>

<driver name="distributed-mpi" />

  <geometry>
    <propagation_dimension> t </propagation_dimension>
    <transverse_dimensions>
      <dimension name="x" lattice="512"
                 domain="(-1.6, 1.6)" />
      <dimension name="y" lattice="512"
                 domain="(-1.6, 1.6)" />  
    </transverse_dimensions>
  </geometry>
  <vector name="absorbingVector" initial_basis="x y" type="complex">
    <components> Va </components>
    <initialisation>
      <![CDATA[
        if (sqrt(x*x + y*y) < rcrit) {
          Va = 0.0;
          // This will be automatically normalised later
        } else {
          Va = -i*kappa*(sqrt(x*x + y*y)-rcrit)*(sqrt(x*x + y*y)-rcrit);
        }
            ]]>
    </initialisation>
  </vector>

<vector name="wavefunction" initial_basis="x y" type="complex">
    <components> psiGS </components>
    <initialisation>
      <![CDATA[
         psiGS = (sqrt(psiM)/(sqrt(M_PI*sigma*sigma)))*exp(-x*x/(2.0*pow(sigma,2)))*exp(-y*y/(2.0*pow(sigma,2))); //initial condition
      ]]>
    </initialisation>
  </vector>

  <computed_vector name="kin_energy" dimensions="" type="real">
  <components> en_kin </components>
  <evaluation>
    <dependencies basis="kx ky">wavefunction</dependencies>
    <![CDATA[
        // Calculate the potential energy.
        en_kin = 0.5*(kx*kx + ky*ky)*mod2(psiGS); //kinetic energy
    ]]>
  </evaluation>
</computed_vector>

<computed_vector name="pot_energy" dimensions="" type="real">
    <components> en_pot </components>
    <evaluation>
      <dependencies basis="x y">wavefunction</dependencies>
      <![CDATA[
        // Calculate the potential energy.
        en_pot = -((1.0)/(2.0*g))*mod2(psiGS)+((1.0)/(4.0*g*g))*log(1+2*g*mod2(psiGS)); //energy of interaction for the 2-level saturated case
      ]]>
    </evaluation>
  </computed_vector>

<sequence>
      <integrate algorithm="RK4" interval="0.5" steps="10000000">
      <samples>1000 1000 1000 1000</samples>
    <operators>
        <operator kind="ip" dimensions="x">
          <operator_names>Tx</operator_names>
          <![CDATA[
            Tx = -0.5*i*kx*kx;
          ]]>
        </operator>
    <operator kind="ip" dimensions="y">
          <operator_names>Ty</operator_names>
          <![CDATA[
            Ty = -0.5*i*ky*ky;
          ]]>
    </operator>    
        <integration_vectors>
          wavefunction
        </integration_vectors> 
        <![CDATA[
          dpsiGS_dt = Tx[psiGS] + Ty[psiGS] + i*(mod2(psiGS)/(1+2*g*mod2(psiGS)))*psiGS-i*Va*psiGS;
        ]]>
        <dependencies>absorbingVector</dependencies>
      </operators>
    </integrate>
  </sequence>

   <output format="hdf5" filename="final.xsil">
   <sampling_group initial_sample="yes">
        <moments>energyt</moments>
        <dependencies>kin_energy pot_energy</dependencies>
        <![CDATA[
          energyt = en_kin + en_pot;
        ]]>
   </sampling_group>
   
      <sampling_group basis="x y" initial_sample="yes">
        <moments>density</moments>
        <dependencies>wavefunction</dependencies>
        <![CDATA[
          density = mod2(psiGS);
        ]]>
      </sampling_group>
      <sampling_group basis="x(0) y(0)" initial_sample="yes">
        <moments>norm</moments>
        <dependencies>wavefunction</dependencies>
        <![CDATA[
          norm = mod2(psiGS);
        ]]>
      </sampling_group>
      <sampling_group initial_sample="yes" basis="x y">
        <dependencies> wavefunction </dependencies>
        <moments> psirealN psiimagN </moments>
        <![CDATA[
          psirealN = Re(psiGS);
          psiimagN = Im(psiGS);
      ]]>
       </sampling_group>
  </output>
</simulation>
